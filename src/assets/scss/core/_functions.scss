// Public functions that can be used globally.

@import "dependencies";

/// Strips the units from strings
/// @param {string|number} $number - The number to remove units from.
/// @return {number} Unitless number.
/// @group core
/// @access public
/// @link https://github.com/nex3/sass/issues/533
@function strip-units($number) {
	@return $number / ($number * 0 + 1);
}

/// Takes in an absolute unit and gives back a relative one.
/// @param {number} $px - A absolute unit.
/// @param {number} $base [ $base-font-size ] - The base font size to calculate with.
/// @return {number} Realtive `em` unit.
/// @group core
/// @access public
@function em($px, $base: $base-font-size) {
	@return _calcRU($px, $base, "em");
}

/// Takes in an absolute unit and gives back a relative one.
/// @param {number} $px - A absolute unit.
/// @param {number} $base [ $base-font-size ] - The base font size to calculate with.
/// @return {number} Realtive `rem` unit.
/// @group core
/// @access public
@function rem($px, $base: $base-font-size) {
	@return _calcRU($px, $base, "rem");
}

/// Takes in an absolute unit and gives back a relative one.
/// @param {number} $px - A absolute unit.
/// @param {number} $base [ $base-font-size ] - The base font size to calculate with.
/// @return {number} Realtive `%` unit.
/// @group core
/// @access public
@function percent($px, $base: $base-font-size) {
	@return _calcRU($px, $base, "%");
}

/// Takes in an absolute unit and gives back a relative one.
/// @param {number} $size - A absolute unit.
/// @group core
/// @access public
/// @return {number} A relative unit based on the values of `$use-rem`, `$use-em`, and `$use-percent`.
@function relative($size) {
	@if($use-rem == true and $use-em == false and $use-percent == false) {
		@return rem($size);
	} @elseif($use-em == true and $use-rem == false and $use-percent == false) {
		@return em($size);
	} @elseif($use-percent == true and $use-rem == false and $use-em == false) {
		@return percent($size);
	}

	@return $size; // we're still using pixels
}
